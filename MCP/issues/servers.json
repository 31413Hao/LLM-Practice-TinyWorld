[
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2620",
    "id": 3354973803,
    "node_id": "PR_kwDONRaG_86lYGBR",
    "number": 2620,
    "title": "docs: Add Wikifunctions to community servers list",
    "user": {
      "login": "Fredibau",
      "id": 163163374,
      "node_id": "U_kgDOCbms7g",
      "avatar_url": "https://avatars.githubusercontent.com/u/163163374?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fredibau",
      "html_url": "https://github.com/Fredibau",
      "followers_url": "https://api.github.com/users/Fredibau/followers",
      "following_url": "https://api.github.com/users/Fredibau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fredibau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fredibau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fredibau/subscriptions",
      "organizations_url": "https://api.github.com/users/Fredibau/orgs",
      "repos_url": "https://api.github.com/users/Fredibau/repos",
      "events_url": "https://api.github.com/users/Fredibau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fredibau/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-26T09:56:07Z",
    "updated_at": "2025-08-26T10:30:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2620",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2620",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2620.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2620.patch",
      "merged_at": null
    },
    "body": "<!-- Provide a brief description of your changes -->\r\n\r\n## Description\r\nThis pull request adds the new \"Wikifunctions\" server to the list of community servers in the main `README.md` file, as per the contribution guidelines.\r\n\r\n## Server Details\r\n<!-- If modifying an existing server, provide details -->\r\n- N/A - This change adds a new server to the documentation, it does not modify an existing server's code.\r\n\r\n## Motivation and Context\r\n<!-- Why is this change needed? What problem does it solve? -->\r\nThe motivation is to make the community aware of the Wikifunctions MCP server, which allows AI models to discover and execute functions from the WikiFunctions library. This adds a valuable new tool to the MCP ecosystem.\r\n\r\n## How Has This Been Tested?\r\n<!-- Have you tested this with an LLM client? Which scenarios were tested? -->\r\nThis is a documentation-only change and does not require testing with an LLM client. The alphabetical ordering of the list has been maintained.\r\n\r\n## Breaking Changes\r\n<!-- Will users need to update their MCP client configurations? -->\r\nNone.\r\n\r\n## Types of changes\r\n<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [x] Documentation update\r\n\r\n## Checklist\r\n<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n- [x] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [x] My changes follows MCP security best practices\r\n- [ ] I have updated the server's README accordingly\r\n- [ ] I have tested this with an LLM client\r\n- [x] My code follows the repository's style guidelines\r\n- [ ] New and existing tests pass locally\r\n- [ ] I have added appropriate error handling\r\n- [ ] I have documented all environment variables and configuration options\r\n\r\n## Additional context\r\n<!-- Add any other context, implementation notes, or design decisions -->\r\nNo additional context.\r\n",
    "closed_by": {
      "login": "Fredibau",
      "id": 163163374,
      "node_id": "U_kgDOCbms7g",
      "avatar_url": "https://avatars.githubusercontent.com/u/163163374?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fredibau",
      "html_url": "https://github.com/Fredibau",
      "followers_url": "https://api.github.com/users/Fredibau/followers",
      "following_url": "https://api.github.com/users/Fredibau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fredibau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fredibau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fredibau/subscriptions",
      "organizations_url": "https://api.github.com/users/Fredibau/orgs",
      "repos_url": "https://api.github.com/users/Fredibau/repos",
      "events_url": "https://api.github.com/users/Fredibau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fredibau/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2620/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2619",
    "id": 3354113895,
    "node_id": "PR_kwDONRaG_86lVQOd",
    "number": 2619,
    "title": "feat(memory): add read_graph_summary function for efficient entity overview",
    "user": {
      "login": "nhickster",
      "id": 13138479,
      "node_id": "MDQ6VXNlcjEzMTM4NDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13138479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhickster",
      "html_url": "https://github.com/nhickster",
      "followers_url": "https://api.github.com/users/nhickster/followers",
      "following_url": "https://api.github.com/users/nhickster/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhickster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhickster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhickster/subscriptions",
      "organizations_url": "https://api.github.com/users/nhickster/orgs",
      "repos_url": "https://api.github.com/users/nhickster/repos",
      "events_url": "https://api.github.com/users/nhickster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhickster/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-26T05:04:17Z",
    "updated_at": "2025-08-26T05:04:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2619",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2619",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2619.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2619.patch",
      "merged_at": null
    },
    "body": "## Description\r\n\r\nAdd `read_graph_summary` function to the memory MCP server for efficient entity overview without loading the entire knowledge graph. This new function provides entity names, types, observation counts, and most recent observations while preserving full relation data, significantly reducing context usage for overview scenarios.\r\n\r\nThis allows LLMs to get an overview of the graph in order to make a better decisions about which entities to fully load into the context with `open_nodes`\r\n\r\n## Server Details\r\n- Server: memory\r\n- Changes to: tools (added new `read_graph_summary` tool)\r\n\r\n## Motivation and Context\r\nThe existing `read_graph` function returns complete entity data including all observations, which can become very large and consume significant context space when users only need an overview of their knowledge graph. This creates inefficiency when:\r\n\r\n- LLMs want to quickly scan what entities exist and their recent activity\r\n- LLM context is being consumed by large observation arrays\r\n- LLMs need to identify entities of interest before diving into full details\r\n\r\nThe `read_graph_summary` function solves this by providing:\r\n- Entity names and types for quick identification\r\n- Observation counts to understand data richness\r\n- Most recent observation for context about latest activity\r\n- All relations preserved for understanding connections\r\n\r\nLLMs can then use the existing `open_nodes` function to get full details for specific entities of interest.\r\n\r\n## How Has This Been Tested?\r\n\r\n**Comprehensive testing completed using VSCode with MCP integration:**\r\n\r\n1. **Functional Testing**:\r\n   - Created test entities with varying observation counts (3-24 observations)\r\n   - Verified correct entity summary structure (name, entityType, observationCount, lastObservation)\r\n   - Confirmed most recent observation is correctly identified and returned\r\n   - Tested with empty graph (returns empty arrays)\r\n\r\n2. **Performance Verification**:\r\n   - Tested with entity containing 24 observations\r\n   - `read_graph`: Returns full 24-observation array\r\n   - `read_graph_summary`: Returns count + last observation only\r\n\r\n3. **Integration Testing**:\r\n   - Verified tool registration in MCP protocol\r\n   - Confirmed proper JSON schema validation\r\n   - Tested workflow: `read_graph_summary` → identify entities → `open_nodes` for details\r\n\r\n4. **Edge Case Testing**:\r\n   - Empty entities arrays\r\n   - Entities with single observations\r\n   - Relations-only graphs\r\n\r\n## Breaking Changes\r\n**No breaking changes** - This is a purely additive feature that:\r\n- Adds a new optional tool (`read_graph_summary`)\r\n- Does not modify existing tool behavior\r\n- Maintains backward compatibility\r\n- Requires no configuration changes\r\n\r\n## Types of changes\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [x] Documentation update\r\n\r\n## Checklist\r\n- [x] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [x] My changes follows MCP security best practices\r\n- [x] I have updated the server's README accordingly\r\n- [x] I have tested this with an LLM client\r\n- [x] My code follows the repository's style guidelines\r\n- [x] New and existing tests pass locally\r\n- [x] I have added appropriate error handling\r\n- [x] I have documented all environment variables and configuration options\r\n\r\n## Additional context\r\n\r\n**Implementation Details:**\r\n- Uses existing `loadGraph()` infrastructure for consistency\r\n- Creates lightweight `EntitySummary` interface separate from full `Entity`\r\n- Preserves all relations unchanged for compatibility\r\n- Returns `KnowledgeGraphSummary` type for clear API contracts\r\n- Follows existing async/await patterns and error handling\r\n\r\n**Performance Benefits:**\r\n- Significant reduction in context usage for overview scenarios\r\n- Enables efficient \"browse then deep-dive\" workflows\r\n- Maintains full functionality through complementary tool usage\r\n- Zero performance impact on existing tools\r\n\r\n**Design Decision:**\r\n- Returns most recent observation rather than first/random to provide most current context\r\n- Includes observation count to help users understand data richness\r\n- Keeps relations unchanged to maintain graph connectivity information\r\n- Uses separate interface to clearly distinguish from full graph structure\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2619/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2618",
    "id": 3354042467,
    "node_id": "I_kwDONRaG_87H6qBj",
    "number": 2618,
    "title": "Kindly Add Flutter MCP better support",
    "user": {
      "login": "fisforfaheem",
      "id": 35878088,
      "node_id": "MDQ6VXNlcjM1ODc4MDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/35878088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fisforfaheem",
      "html_url": "https://github.com/fisforfaheem",
      "followers_url": "https://api.github.com/users/fisforfaheem/followers",
      "following_url": "https://api.github.com/users/fisforfaheem/following{/other_user}",
      "gists_url": "https://api.github.com/users/fisforfaheem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fisforfaheem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fisforfaheem/subscriptions",
      "organizations_url": "https://api.github.com/users/fisforfaheem/orgs",
      "repos_url": "https://api.github.com/users/fisforfaheem/repos",
      "events_url": "https://api.github.com/users/fisforfaheem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fisforfaheem/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-26T04:30:37Z",
    "updated_at": "2025-08-26T04:30:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "Flutter needs more attention as well as DART language.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2618/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2617",
    "id": 3353458322,
    "node_id": "PR_kwDONRaG_86lTEbz",
    "number": 2617,
    "title": "Add ticketmaster-mcp-server",
    "user": {
      "login": "mochow13",
      "id": 6396792,
      "node_id": "MDQ6VXNlcjYzOTY3OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6396792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mochow13",
      "html_url": "https://github.com/mochow13",
      "followers_url": "https://api.github.com/users/mochow13/followers",
      "following_url": "https://api.github.com/users/mochow13/following{/other_user}",
      "gists_url": "https://api.github.com/users/mochow13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mochow13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mochow13/subscriptions",
      "organizations_url": "https://api.github.com/users/mochow13/orgs",
      "repos_url": "https://api.github.com/users/mochow13/repos",
      "events_url": "https://api.github.com/users/mochow13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mochow13/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-25T23:06:41Z",
    "updated_at": "2025-08-25T23:06:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2617",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2617",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2617.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2617.patch",
      "merged_at": null
    },
    "body": "<!-- Provide a brief description of your changes -->\r\n\r\n## Description\r\n\r\nAn MCP server for TicketMaster Discovery API implemented in Streamable HTTP transport protocol\r\n\r\n## Motivation and Context\r\n<!-- Why is this change needed? What problem does it solve? -->\r\n\r\nExisting Ticketmaster MCP servers do not support Streamable HTTP. This server addresses that.\r\n\r\n## How Has This Been Tested?\r\n<!-- Have you tested this with an LLM client? Which scenarios were tested? -->\r\n- With a full-fledged client implementation based on Gemini. The client implementation is also included in the repository.\r\n- With deployment on Smithery AI: https://smithery.ai/server/@mochow13/ticketmaster-mcp-server\r\n\r\n## Types of changes\r\n<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Documentation update\r\n\r\n## Checklist\r\n<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n- [x] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [x] My changes follows MCP security best practices\r\n- [x] I have updated the server's README accordingly\r\n- [x] I have tested this with an LLM client\r\n- [x] My code follows the repository's style guidelines\r\n- [x] New and existing tests pass locally\r\n- [x] I have added appropriate error handling\r\n- [x] I have documented all environment variables and configuration options",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2617/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2615",
    "id": 3349963048,
    "node_id": "PR_kwDONRaG_86lHZcx",
    "number": 2615,
    "title": "Add Amazon Q CLI setup instructions for fetch MCP server",
    "user": {
      "login": "Keerthi-Sreenivas",
      "id": 69894872,
      "node_id": "MDQ6VXNlcjY5ODk0ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/69894872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keerthi-Sreenivas",
      "html_url": "https://github.com/Keerthi-Sreenivas",
      "followers_url": "https://api.github.com/users/Keerthi-Sreenivas/followers",
      "following_url": "https://api.github.com/users/Keerthi-Sreenivas/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keerthi-Sreenivas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keerthi-Sreenivas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keerthi-Sreenivas/subscriptions",
      "organizations_url": "https://api.github.com/users/Keerthi-Sreenivas/orgs",
      "repos_url": "https://api.github.com/users/Keerthi-Sreenivas/repos",
      "events_url": "https://api.github.com/users/Keerthi-Sreenivas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keerthi-Sreenivas/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-24T22:28:20Z",
    "updated_at": "2025-08-24T22:32:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2615",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2615",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2615.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2615.patch",
      "merged_at": null
    },
    "body": "<!-- Provide a brief description of your changes -->\r\n\r\n## Description\r\n\r\n## Server Details\r\n<!-- If modifying an existing server, provide details -->\r\n- Server: <!-- e.g., filesystem, github --> Fetch MCP\r\n- Changes to: <!-- e.g., tools, resources, prompts --> ReadMe doc changes for adding instruction to setup fetch MCP in Q CLI\r\n\r\n## Motivation and Context\r\n<!-- Why is this change needed? What problem does it solve? --> Steps for Amazon Q CLI fetch server setup\r\n\r\n## How Has This Been Tested?\r\n<!-- Have you tested this with an LLM client? Which scenarios were tested? --> Yes (Tested uvx / Pipx setup..other instructions are similar to how you would setup fetch MCP in claude code)\r\n\r\n## Breaking Changes\r\n<!-- Will users need to update their MCP client configurations? --> No. Users can follow instructions for setting up their MCP in Q CLI \r\n\r\n## Types of changes\r\n<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [X] Documentation update\r\n\r\n## Checklist\r\n<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n- [X] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [X] My changes follows MCP security best practices\r\n- [X] I have updated the server's README accordingly\r\n- [X] I have tested this with an LLM client\r\n- [X] My code follows the repository's style guidelines\r\n- [X] New and existing tests pass locally\r\n- [X] I have added appropriate error handling\r\n- [X] I have documented all environment variables and configuration options\r\n\r\n## Additional context\r\n<!-- Add any other context, implementation notes, or design decisions -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2615/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2611",
    "id": 3349108889,
    "node_id": "PR_kwDONRaG_86lE6FL",
    "number": 2611,
    "title": "Improve parameter descriptions in sequential-thinking for better LLM type safety",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-24T03:36:26Z",
    "updated_at": "2025-08-25T17:27:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2611",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2611",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2611.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2611.patch",
      "merged_at": null
    },
    "body": "Update thoughtNumber and totalThoughts parameter descriptions to use positive-only examples that guide LLMs toward correct numeric type usage. This addresses the issue where LLMs sometimes generate string values (e.g. \"/1\") instead of numeric values (e.g. 1) for integer parameters.\r\n\r\nFixes #2598\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2611/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2610",
    "id": 3349108337,
    "node_id": "PR_kwDONRaG_86lE5-L",
    "number": 2610,
    "title": "fix: update temperature argument type from number to string in everything server docs",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-24T03:35:19Z",
    "updated_at": "2025-08-24T03:35:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2610",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2610",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2610.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2610.patch",
      "merged_at": null
    },
    "body": "Fixes issue #474 - documentation mismatch where temperature parameter for prompt input argument was documented as (number) but TypeScript SDK only accepts string arguments via z.record(z.string())\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2610/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2609",
    "id": 3349093926,
    "node_id": "PR_kwDONRaG_86lE276",
    "number": 2609,
    "title": "fix: resolve relative paths against allowed directories instead of process.cwd()",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-24T03:16:27Z",
    "updated_at": "2025-08-24T03:18:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2609",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2609",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2609.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2609.patch",
      "merged_at": null
    },
    "body": "Fixes issue where relative paths were incorrectly resolved against process.cwd(), causing \"Access denied - path outside allowed directories\" errors when the MCP server's working directory was outside the configured allowed directories.\r\n\r\nThe fix implements intelligent path resolution that:\r\n1. First tries to resolve relative paths against each allowed directory\r\n2. Validates the resulting path is within allowed directories \r\n3. Falls back to the first allowed directory if no valid resolution is found\r\n4. Maintains backward compatibility by falling back to process.cwd() when no allowed directories are configured\r\n\r\nResolves #2526\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2609/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2608",
    "id": 3348516660,
    "node_id": "I_kwDONRaG_87Hlk80",
    "number": 2608,
    "title": "Configure Claude Code Github Action to use established PR template",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "domdomegg",
      "id": 4953590,
      "node_id": "MDQ6VXNlcjQ5NTM1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domdomegg",
      "html_url": "https://github.com/domdomegg",
      "followers_url": "https://api.github.com/users/domdomegg/followers",
      "following_url": "https://api.github.com/users/domdomegg/following{/other_user}",
      "gists_url": "https://api.github.com/users/domdomegg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domdomegg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domdomegg/subscriptions",
      "organizations_url": "https://api.github.com/users/domdomegg/orgs",
      "repos_url": "https://api.github.com/users/domdomegg/repos",
      "events_url": "https://api.github.com/users/domdomegg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domdomegg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "domdomegg",
        "id": 4953590,
        "node_id": "MDQ6VXNlcjQ5NTM1OTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/domdomegg",
        "html_url": "https://github.com/domdomegg",
        "followers_url": "https://api.github.com/users/domdomegg/followers",
        "following_url": "https://api.github.com/users/domdomegg/following{/other_user}",
        "gists_url": "https://api.github.com/users/domdomegg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/domdomegg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/domdomegg/subscriptions",
        "organizations_url": "https://api.github.com/users/domdomegg/orgs",
        "repos_url": "https://api.github.com/users/domdomegg/repos",
        "events_url": "https://api.github.com/users/domdomegg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/domdomegg/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-23T17:31:05Z",
    "updated_at": "2025-08-25T17:43:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "**Is your feature request related to a problem? Please describe.**\nWhen Claude creates a PR through the Claude Code Github Action, the description doesn't include the standard sections from the PR template.\n\n**Describe the solution you'd like**\nCan we configure Claude Code Github Action to use established PR template?\n\n**Describe alternatives you've considered**\nLeaving as is: doesn't include important details like 'how was this tested' and 'is this a breaking change?'\n\n**Additional context**\nExample of a PR co-authored by Claude which doesn't follow the template: https://github.com/modelcontextprotocol/servers/pull/2606\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2608/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2607",
    "id": 3347698535,
    "node_id": "PR_kwDONRaG_86lALVi",
    "number": 2607,
    "title": "refactor(CONTRIBUTING.md): streamline contribution guidelines and improve clarity",
    "user": {
      "login": "domdomegg",
      "id": 4953590,
      "node_id": "MDQ6VXNlcjQ5NTM1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domdomegg",
      "html_url": "https://github.com/domdomegg",
      "followers_url": "https://api.github.com/users/domdomegg/followers",
      "following_url": "https://api.github.com/users/domdomegg/following{/other_user}",
      "gists_url": "https://api.github.com/users/domdomegg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domdomegg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domdomegg/subscriptions",
      "organizations_url": "https://api.github.com/users/domdomegg/orgs",
      "repos_url": "https://api.github.com/users/domdomegg/repos",
      "events_url": "https://api.github.com/users/domdomegg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domdomegg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432733,
        "node_id": "LA_kwDONRaG_88AAAABzvmeHQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2025-08-23T07:05:01Z",
    "updated_at": "2025-08-26T04:37:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2607",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2607",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2607.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2607.patch",
      "merged_at": null
    },
    "body": null,
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2607/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2606",
    "id": 3347671240,
    "node_id": "PR_kwDONRaG_86lAFNd",
    "number": 2606,
    "title": "feat(search_files): clarify description and standardise implementation",
    "user": {
      "login": "domdomegg",
      "id": 4953590,
      "node_id": "MDQ6VXNlcjQ5NTM1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domdomegg",
      "html_url": "https://github.com/domdomegg",
      "followers_url": "https://api.github.com/users/domdomegg/followers",
      "following_url": "https://api.github.com/users/domdomegg/following{/other_user}",
      "gists_url": "https://api.github.com/users/domdomegg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domdomegg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domdomegg/subscriptions",
      "organizations_url": "https://api.github.com/users/domdomegg/orgs",
      "repos_url": "https://api.github.com/users/domdomegg/repos",
      "events_url": "https://api.github.com/users/domdomegg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domdomegg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2025-08-23T06:51:21Z",
    "updated_at": "2025-08-26T04:38:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2606",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2606",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2606.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2606.patch",
      "merged_at": null
    },
    "body": "## Summary\n- Clarified search_files tool description to explicitly state it searches by filename patterns, not file content\n- Standardized implementation to use glob matching exclusively instead of mixing glob and substring matching\n- Updated tests to reflect the new consistent glob-only behavior\n\n## Changes\n- Modified pattern matching in `buildTree` to use only minimatch glob patterns\n- Updated search_files to accept array of patterns instead of single pattern for better flexibility\n- Adjusted test cases to use proper glob patterns (e.g., `**/node_modules` for nested directories)\n- Improved tool descriptions in the API to be clearer about glob pattern usage\n\nFixes #896",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2606/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2604",
    "id": 3347114940,
    "node_id": "PR_kwDONRaG_86k-VYC",
    "number": 2604,
    "title": "Create README.md for YouTube MCP Server",
    "user": {
      "login": "aardeshir",
      "id": 9605033,
      "node_id": "MDQ6VXNlcjk2MDUwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9605033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aardeshir",
      "html_url": "https://github.com/aardeshir",
      "followers_url": "https://api.github.com/users/aardeshir/followers",
      "following_url": "https://api.github.com/users/aardeshir/following{/other_user}",
      "gists_url": "https://api.github.com/users/aardeshir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aardeshir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aardeshir/subscriptions",
      "organizations_url": "https://api.github.com/users/aardeshir/orgs",
      "repos_url": "https://api.github.com/users/aardeshir/repos",
      "events_url": "https://api.github.com/users/aardeshir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aardeshir/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 8461835294,
        "node_id": "LA_kwDONRaG_88AAAAB-F1cHg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/waiting%20for%20submitter",
        "name": "waiting for submitter",
        "color": "C5DEF5",
        "default": false,
        "description": "Waiting for the submitter to provide more info"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2025-08-23T00:04:49Z",
    "updated_at": "2025-08-24T14:42:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2604",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2604",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2604.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2604.patch",
      "merged_at": null
    },
    "body": "## Description\r\nAdding YouTube MCP server to the official directory.\r\n\r\n## Server Details\r\n- Server: youtube (new server)\r\n- NPM Package: @a.ardeshir/youtube-mcp\r\n- Repository: https://github.com/aardeshir/youtube-mcp\r\n- Features: Search videos, manage playlists, OAuth2 authentication\r\n\r\n## Motivation and Context\r\nProvides YouTube Data API integration for MCP clients, enabling video search and playlist management directly in Claude and other MCP-compatible applications.\r\n\r\n## How Has This Been Tested?\r\nTested with Claude Desktop using OAuth2 authentication. All 5 tools (search_videos, create_playlist, add_to_playlist, list_playlists, delete_playlist) verified working.\r\n\r\n## Types of changes\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] Documentation update\r\n\r\n## Checklist\r\n- [x] I have read the MCP Protocol Documentation\r\n- [x] My changes follows MCP security best practices\r\n- [x] I have updated the server's README accordingly\r\n- [x] I have tested this with an LLM client\r\n- [x] New and existing tests pass locally\r\n- [x] I have added appropriate error handling\r\n- [x] I have documented all environment variables and configuration options\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2604/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2603",
    "id": 3346404983,
    "node_id": "PR_kwDONRaG_86k71a-",
    "number": 2603,
    "title": "Fix filesystem server crashes on invalid paths with graceful validation",
    "user": {
      "login": "sebastien-rosset",
      "id": 16657278,
      "node_id": "MDQ6VXNlcjE2NjU3Mjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16657278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebastien-rosset",
      "html_url": "https://github.com/sebastien-rosset",
      "followers_url": "https://api.github.com/users/sebastien-rosset/followers",
      "following_url": "https://api.github.com/users/sebastien-rosset/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebastien-rosset/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebastien-rosset/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebastien-rosset/subscriptions",
      "organizations_url": "https://api.github.com/users/sebastien-rosset/orgs",
      "repos_url": "https://api.github.com/users/sebastien-rosset/repos",
      "events_url": "https://api.github.com/users/sebastien-rosset/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebastien-rosset/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-22T19:13:07Z",
    "updated_at": "2025-08-24T02:31:14Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2603",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2603",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2603.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2603.patch",
      "merged_at": null
    },
    "body": "<!-- Provide a brief description of your changes -->\r\n\r\n## Description\r\n\r\nThis PR fixes filesystem server crashes when invalid or inaccessible paths are configured by implementing graceful path validation. The server now logs warnings for problematic paths at startup but continues running, allowing operations to retry at runtime when storage becomes available.\r\n\r\n## Server Details\r\n<!-- If modifying an existing server, provide details -->\r\n- Server: filesystem\r\n- Changes to: startup validation logic, path handling, error handling, logging\r\n\r\n## Motivation and Context\r\n<!-- Why is this change needed? What problem does it solve? -->\r\n\r\nAddresses GitHub issues #2113 and #2483. The filesystem server would crash immediately if any configured directory path was invalid, inaccessible, or pointed to a file instead of a directory. This was problematic for users with:\r\n\r\n- Network Attached Storage (NAS) that might be temporarily offline\r\n- VPN-mounted drives that connect after server startup  \r\n- USB/external drives that may not be connected at startup\r\n- Typos in path configuration\r\n- Directories that don't exist yet but will be created later\r\n\r\nThe original behavior provided a poor user experience and made the server fragile in dynamic storage environments.\r\n\r\n## How Has This Been Tested?\r\n<!-- Have you tested this with an LLM client? Which scenarios were tested? -->\r\n\r\n- [x] Tested with valid accessible directories (normal operation)\r\n- [x] Tested with non-existent paths (graceful warning, runtime retry)\r\n- [x] Tested with file paths instead of directories (proper skipping)\r\n- [x] Tested with mixed valid/invalid configurations\r\n- [x] Verified parallel validation performance with Promise.all\r\n- [x] Confirmed runtime operations work when storage becomes available\r\n\r\n## Breaking Changes\r\n<!-- Will users need to update their MCP client configurations? -->\r\n\r\nNo breaking changes. This is backwards compatible - existing configurations continue to work. The only change is that invalid paths now generate warnings instead of crashes.\r\n\r\n## Types of changes\r\n<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)  \r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Documentation update\r\n\r\n## Checklist\r\n<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n- [x] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [x] My changes follows MCP security best practices\r\n- [ ] I have updated the server's README accordingly\r\n- [x] I have tested this with an LLM client\r\n- [x] My code follows the repository's style guidelines\r\n- [ ] New and existing tests pass locally\r\n- [x] I have added appropriate error handling\r\n- [x] I have documented all environment variables and configuration options\r\n\r\n## Additional context\r\n<!-- Add any other context, implementation notes, or design decisions -->\r\n\r\n**Implementation Details:**\r\n- Replaced sequential validation loop with `Promise.all` for better performance\r\n- Added clear comments explaining retry vs skip logic for different path types\r\n- Regular files are permanently excluded (can never become directories)\r\n- Symlinks and special files are included for runtime retry (NAS/VPN scenarios)\r\n- Inaccessible paths are included for runtime retry (network storage, permissions)\r\n\r\n**Design Philosophy:**\r\nThe new approach is optimistic about dynamic storage - we include paths that might become valid directories later while permanently excluding things that can never be directories. This balances robustness with usability for modern storage environments.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2603/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2598",
    "id": 3344396624,
    "node_id": "I_kwDONRaG_87HV3FQ",
    "number": 2598,
    "title": "Improve parameter descriptions in sequential-thinking for better LLM type safety",
    "user": {
      "login": "AokiSeita-enlinks",
      "id": 222131007,
      "node_id": "U_kgDODT1zPw",
      "avatar_url": "https://avatars.githubusercontent.com/u/222131007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AokiSeita-enlinks",
      "html_url": "https://github.com/AokiSeita-enlinks",
      "followers_url": "https://api.github.com/users/AokiSeita-enlinks/followers",
      "following_url": "https://api.github.com/users/AokiSeita-enlinks/following{/other_user}",
      "gists_url": "https://api.github.com/users/AokiSeita-enlinks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AokiSeita-enlinks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AokiSeita-enlinks/subscriptions",
      "organizations_url": "https://api.github.com/users/AokiSeita-enlinks/orgs",
      "repos_url": "https://api.github.com/users/AokiSeita-enlinks/repos",
      "events_url": "https://api.github.com/users/AokiSeita-enlinks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AokiSeita-enlinks/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      },
      {
        "id": 8359497168,
        "node_id": "LA_kwDONRaG_88AAAAB8kPN0A",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-sequentialthinking",
        "name": "server-sequentialthinking",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Sequential Thinking MCP server - src/sequentialthinking"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2025-08-22T07:03:40Z",
    "updated_at": "2025-08-24T03:36:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "## Problem\n\n  LLMs sometimes generate string values (e.g., `\"1\"`) instead of numeric values (e.g., `1`) for integer parameters in the sequential-thinking MCP\n  server, causing validation errors.\n\n  ## Current Implementation\n\n  The server correctly validates types with strict checking:\n  ```typescript\n  if (!data.thoughtNumber || typeof data.thoughtNumber !== 'number') {\n    throw new Error('Invalid thoughtNumber: must be a number');\n  }\n ```\n  However, the current schema descriptions are minimal:\n```typescript\n      thoughtNumber: {\n        type: \"integer\",\n        description: \"Current thought number\",\n        minimum: 1\n      },\n      totalThoughts: {\n        type: \"integer\",\n        description: \"Estimated total thoughts needed\",\n        minimum: 1\n      },\n```\n\n  Enhance parameter descriptions to explicitly guide LLMs toward correct type usage:\n```typescript\n  {\n    thoughtNumber: {\n      type: \"integer\",\n      description: \"Current thought number (numeric value only, e.g. 1, 2, 3 - NOT \"1\",\"2\",\"3\")\n      minimum: 1\n    },\n    totalThoughts: {\n      type: \"integer\",\n      description: \"Estimated total thoughts needed (numeric value only, e.g. 5,10 - NOT \"5\",\"10\")\n      minimum: 1\n    }\n  }\n```\nI'm not very familiar with MCP development, so please excuse me if I say something stupid!",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2598/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2596",
    "id": 3343910549,
    "node_id": "PR_kwDONRaG_86kzYyA",
    "number": 2596,
    "title": "UUID based resources",
    "user": {
      "login": "domdomegg",
      "id": 4953590,
      "node_id": "MDQ6VXNlcjQ5NTM1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domdomegg",
      "html_url": "https://github.com/domdomegg",
      "followers_url": "https://api.github.com/users/domdomegg/followers",
      "following_url": "https://api.github.com/users/domdomegg/following{/other_user}",
      "gists_url": "https://api.github.com/users/domdomegg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domdomegg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domdomegg/subscriptions",
      "organizations_url": "https://api.github.com/users/domdomegg/orgs",
      "repos_url": "https://api.github.com/users/domdomegg/repos",
      "events_url": "https://api.github.com/users/domdomegg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domdomegg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2025-08-22T02:42:08Z",
    "updated_at": "2025-08-26T04:39:56Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2596",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2596",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2596.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2596.patch",
      "merged_at": null
    },
    "body": "Fixes #475\r\n\r\nAlso see #2570",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2596/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2579",
    "id": 3334166219,
    "node_id": "I_kwDONRaG_87Gu1bL",
    "number": 2579,
    "title": "Bug Report and Resolution: `mcp-server-memory` Failures due to Race Condition and Environment Misconfiguration",
    "user": {
      "login": "Manamama-Gemini-Cloud-AI-01",
      "id": 222482969,
      "node_id": "U_kgDODULSGQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/222482969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01",
      "html_url": "https://github.com/Manamama-Gemini-Cloud-AI-01",
      "followers_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/followers",
      "following_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/following{/other_user}",
      "gists_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/subscriptions",
      "organizations_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/orgs",
      "repos_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/repos",
      "events_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Manamama-Gemini-Cloud-AI-01/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8359496976,
        "node_id": "LA_kwDONRaG_88AAAAB8kPNEA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-memory",
        "name": "server-memory",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Memory MCP server - src/memory"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2025-08-19T12:18:33Z",
    "updated_at": "2025-08-24T03:27:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "### Summary\n\nThis report details the investigation and resolution of a critical bug that rendered the `mcp-server-memory` toolset non-functional, causing \"Unexpected non-whitespace character after JSON\" errors. The root cause was a combination of a race condition in the server's file-writing logic and an environment misconfiguration that prevented the execution of the corrected code. The issue was ultimately resolved after the user manually deleted the corrupted `memory.json` file, allowing the fixed server environment to take over.\n\n### Root Cause Analysis\n\nThe investigation revealed a multi-faceted root cause:\n\n1.  **Code Bug:** The server's code lacked a file lock on the `memory.json` file. This created a **race condition** where concurrent writes would corrupt the file. This was demonstrated by the provided `test_race_condition.py` script.\n2.  **Data Corruption:** The corrupted `memory.json` file was the direct cause of the JSON parsing errors. The server would attempt to read the malformed file and fail.\n3.  **Environment Issue:** The primary blocker was an environment misconfiguration. The system was using `npx` to run an old, buggy version of the server from the internet, instead of the locally compiled and fixed version that included the race condition fix.\n\n### Evidence of the Bug (Race Condition)\n\nThe following Python script simulates the original buggy logic. It starts two processes that attempt to write to the same JSON file concurrently without a lock. This can result in a corrupted file, demonstrating the race condition.\n\n<details>\n<summary>Bug Simulation Code</summary>\n\n```python\nimport json\nimport os\nfrom multiprocessing import Process, Manager\n\n# The file to be shared and potentially corrupted\nTEST_FILE = 'test_memory.json'\n\n# This function simulates the buggy load/save logic from the TypeScript code\ndef buggy_operation(process_id, new_entry, shared_dict):\n    \"\"\"Simulates a single process reading, updating, and writing the file.\"\"\"\n    try:\n        # 1. Load the graph (read from file)\n        try:\n            with open(TEST_FILE, 'r') as f:\n                data = f.read()\n                # In a race condition, this data could be incomplete\n                graph = json.loads(data) if data else {'entries': []}\n        except (FileNotFoundError, json.JSONDecodeError):\n            graph = {'entries': []}\n\n        # 2. Add the new entry\n        graph['entries'].append(new_entry)\n        \n        # 3. Save the graph (write back to file)\n        with open(TEST_FILE, 'w') as f:\n            # This is the critical section where the race condition happens.\n            # One process can overwrite the other's changes.\n            json.dump(graph, f)\n        \n        shared_dict[process_id] = 'Success'\n\n    except Exception as e:\n        # If a json.JSONDecodeError happens, it means we read a corrupted file\n        shared_dict[process_id] = f'Error: {type(e).__name__} - {e}'\n\ndef main():\n    \"\"\"Run two buggy operations in parallel to try and trigger the race condition.\"\"\"\n    # Clean up previous test file if it exists\n    if os.path.exists(TEST_FILE):\n        os.remove(TEST_FILE)\n\n    with Manager() as manager:\n        shared_dict = manager.dict()\n        \n        # Create two processes that will run the buggy operation concurrently\n        p1 = Process(target=buggy_operation, args=(1, {'id': 1, 'data': 'from_process_1'}, shared_dict))\n        p2 = Process(target=buggy_operation, args=(2, {'id': 2, 'data': 'from_process_2'}, shared_dict))\n\n        p1.start()\n        p2.start()\n\n        p1.join()\n        p2.join()\n\n        print(\"--- Process Results ---\")\n        for pid, result in shared_dict.items():\n            print(f\"Process {pid}: {result}\")\n\n        print(\"\\n--- Final File Content ---\")\n        try:\n            with open(TEST_FILE, 'r') as f:\n                content = f.read()\n                print(content)\n                # Final check: is the file valid JSON?\n                final_data = json.loads(content)\n                print(\"\\n--- Final Parsed Data ---\")\n                print(final_data)\n                if len(final_data.get('entries', [])) != 2:\n                    print(\"\\n*** BUG CONFIRMED: Data was lost. Expected 2 entries. ***\")\n                else:\n                    print(\"\\n*** TEST PASSED (Race condition not triggered this time) ***\")\n\n        except (FileNotFoundError, json.JSONDecodeError) as e:\n            print(f\"*** BUG CONFIRMED: File is corrupted or does not exist. ***\")\n            print(f\"Error: {e}\")\n        finally:\n             # Clean up the test file\n            if os.path.exists(TEST_FILE):\n                os.remove(TEST_FILE)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n</details>\n\n### The Fix (Locking Mechanism)\n\nThe corrected code uses a file-based lock to ensure that only one process can write to the `memory.json` file at a time, preventing the race condition. The following script demonstrates this fixed logic.\n\n<details>\n<summary>Fix Verification Code</summary>\n\n```python\nimport os\nimport json\nfrom multiprocessing import Process, Manager, Lock\n\nclass FixedKnowledgeGraphManager:\n    def __init__(self, memory_file_path, lock):\n        self.memory_file_path = memory_file_path\n        self.lock = lock\n\n    def _load_graph_safe(self):\n        \"\"\"Safely loads the graph from the JSON file.\"\"\"\n        try:\n            with open(self.memory_file_path, 'r') as f:\n                data = f.read()\n                return json.loads(data) if data else {'entities': [], 'relations': []}\n        except FileNotFoundError:\n            return {'entities': [], 'relations': []}\n\n    def _save_graph_safe(self, graph):\n        \"\"\"Safely saves the graph to the JSON file.\"\"\"\n        with open(self.memory_file_path, 'w') as f:\n            json.dump(graph, f, indent=2)\n\n    def _execute_with_lock(self, operation, *args, **kwargs):\n        \"\"\"Executes a given file operation with a lock.\"\"\"\n        with self.lock:\n            graph = self._load_graph_safe()\n            result, updated_graph = operation(graph, *args, **kwargs)\n            self._save_graph_safe(updated_graph)\n            return result\n\n    def create_entities(self, graph, entities):\n        new_entities = [e for e in entities if e['name'] not in {ex['name'] for ex in graph['entities']}]\n        graph['entities'].extend(new_entities)\n        return new_entities, graph\n\n    def create_relations(self, graph, relations):\n        # Simple add for testing; a real implementation would check for duplicates\n        graph['relations'].extend(relations)\n        return relations, graph\n\n    # Wrapper methods that will be called by the test processes\n    def safe_create_entities(self, entities):\n        return self._execute_with_lock(self.create_entities, entities)\n\n    def safe_create_relations(self, relations):\n        return self._execute_with_lock(self.create_relations, relations)\n\n\nTEST_FILE = 'test_memory_fixed.json'\n\ndef safe_operation(process_id, entities_to_add, relations_to_add, shared_dict, lock):\n    \"\"\"Performs concurrent operations using the fixed manager.\"\"\"\n    try:\n        manager = FixedKnowledgeGraphManager(TEST_FILE, lock)\n        manager.safe_create_entities(entities_to_add)\n        manager.safe_create_relations(relations_to_add)\n        shared_dict[process_id] = 'Success'\n    except Exception as e:\n        shared_dict[process_id] = f'Error: {type(e).__name__} - {e}'\n\ndef main():\n    \"\"\"Run two safe operations in parallel to verify the fix.\"\"\"\n    if os.path.exists(TEST_FILE):\n        os.remove(TEST_FILE)\n\n    with Manager() as process_manager:\n        shared_dict = process_manager.dict()\n        lock = Lock()\n\n        # Define data for two processes\n        data_p1 = {\n            'entities': [{'name': 'Human', 'entityType': 'Actor'}],\n            'relations': [{'from': 'Human', 'to': 'Start_Bank', 'relationType': 'is_at'}]\n        }\n        data_p2 = {\n            'entities': [{'name': 'Goat', 'entityType': 'Actor'}],\n            'relations': [{'from': 'Goat', 'to': 'Start_Bank', 'relationType': 'is_at'}]\n        }\n\n        p1 = Process(target=safe_operation, args=(1, data_p1['entities'], data_p1['relations'], shared_dict, lock))\n        p2 = Process(target=safe_operation, args=(2, data_p2['entities'], data_p2['relations'], shared_dict, lock))\n\n        p1.start()\n        p2.start()\n\n        p1.join()\n        p2.join()\n\n        print(\"--- Process Results ---\")\n        for pid, result in shared_dict.items():\n            print(f\"Process {pid}: {result}\")\n\n        print(\"\\n--- Final File Content ---\")\n        # We need a final read outside the lock to verify the final state\n        try:\n            with open(TEST_FILE, 'r') as f:\n                final_graph = json.load(f)\n                print(json.dumps(final_graph, indent=2))\n                num_entities = len(final_graph.get('entities', []))\n                num_relations = len(final_graph.get('relations', []))\n                print(f\"\\nFound {num_entities} entities and {num_relations} relations.\")\n                if num_entities == 2 and num_relations == 2:\n                    print(\"\\n*** BUG FIXED: All data was written successfully. ***\")\n                else:\n                    print(f\"\\n*** TEST FAILED: Data was lost. Expected 2 entities and 2 relations. ***\")\n        except (FileNotFoundError, json.JSONDecodeError) as e:\n            print(f\"Error reading final file: {e}\")\n        finally:\n            if os.path.exists(TEST_FILE):\n                os.remove(TEST_FILE)\n\nif __name__ == '__main__':\n    main()\n```\n\n</details>\n\n### Relation to Previously Reported Bugs\n\nThis issue is consistent with previously reported bugs in the `modelcontextprotocol/servers` repository, suggesting a systemic problem that has now been addressed:\n\n*   **Direct Confirmation:** This bug is a direct parallel to **Issue #2412**, which reported the exact same \"Unexpected non-whitespace character\" error, although for the filesystem server. This confirms the problem was not isolated to a single server.\n*   **Related Symptom:** The server timeouts and unexpected exits reported in **Issue #719** are also likely symptoms of the same underlying server instability caused by this bug.\n\n### Conclusion\n\nThe \"Unexpected non-whitespace character\" bug is **resolved**. The resolution required both a **code fix** (implementing a file lock to prevent the race condition) and an **environment fix** (ensuring the correct, locally-built server is executed). The user's manual deletion of the corrupted `memory.json` file was the final step that enabled the corrected environment to function properly.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2579/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2573",
    "id": 3330061022,
    "node_id": "PR_kwDONRaG_86kExGZ",
    "number": 2573,
    "title": "feat: add MCP roots protocol support to everything server",
    "user": {
      "login": "AjayKumbham",
      "id": 192850670,
      "node_id": "U_kgDOC36q7g",
      "avatar_url": "https://avatars.githubusercontent.com/u/192850670?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AjayKumbham",
      "html_url": "https://github.com/AjayKumbham",
      "followers_url": "https://api.github.com/users/AjayKumbham/followers",
      "following_url": "https://api.github.com/users/AjayKumbham/following{/other_user}",
      "gists_url": "https://api.github.com/users/AjayKumbham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AjayKumbham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AjayKumbham/subscriptions",
      "organizations_url": "https://api.github.com/users/AjayKumbham/orgs",
      "repos_url": "https://api.github.com/users/AjayKumbham/repos",
      "events_url": "https://api.github.com/users/AjayKumbham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AjayKumbham/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 8359492806,
        "node_id": "LA_kwDONRaG_88AAAAB8kO8xg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-everything",
        "name": "server-everything",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Everything MCP server - src/everything"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-18T10:04:22Z",
    "updated_at": "2025-08-24T08:48:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2573",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2573",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2573.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2573.patch",
      "merged_at": null
    },
    "body": "## Description\r\n\r\nThis PR adds MCP roots protocol support to the everything server to provide complete MCP feature coverage. The implementation includes:\r\n\r\n- Add roots capability declaration with `listChanged: true`\r\n- Implement `roots/list_changed` notification handler\r\n- Add initialization handler to request initial roots from client\r\n- Add new `listRoots` tool to demonstrate roots functionality\r\n- Add comprehensive logging for roots protocol events\r\n- Update README.md with roots documentation\r\n\r\n## Server Details\r\n\r\n- Server: everything\r\n- Changes to: capabilities, tools, notification handlers, initialization logic\r\n\r\n## Motivation and Context\r\n\r\nResolves #2552\r\n\r\nThe everything server is designed to demonstrate all MCP protocol features for client developers to test against. However, it was missing roots protocol support, which is an important MCP capability that allows clients to specify which directories servers can access. This change ensures the everything server truly covers \"everything\" in the MCP specification.\r\n\r\nWhile this server doesn't actually access files, implementing roots support provides:\r\n1. A complete reference implementation for client developers\r\n2. A way to test roots protocol implementation in MCP clients\r\n3. Educational value showing how servers should handle the roots protocol\r\n\r\n## How Has This Been Tested?\r\n\r\n- ✅ TypeScript compilation passes without errors\r\n- ✅ Server builds successfully with `npm run build`\r\n- ✅ Server can be instantiated and includes the new capabilities\r\n- ✅ Code follows the same patterns used in the filesystem server's roots implementation\r\n- ✅ Manual verification that the server declares roots capability and includes the listRoots tool\r\n\r\nThe implementation follows the established patterns from the filesystem server's roots implementation, ensuring consistency with the existing codebase.\r\n\r\n## Breaking Changes\r\n\r\nNo breaking changes. This is purely additive functionality that doesn't affect existing server behavior or client configurations.\r\n\r\n## Types of changes\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [x] Documentation update\r\n\r\n## Checklist\r\n\r\n- [x] I have read the [MCP Protocol Documentation](https://modelcontextprotocol.io)\r\n- [x] My changes follows MCP security best practices\r\n- [x] I have updated the server's README accordingly\r\n- [x] I have tested this with an LLM client\r\n- [x] My code follows the repository's style guidelines\r\n- [x] New and existing tests pass locally\r\n- [x] I have added appropriate error handling\r\n- [x] I have documented all environment variables and configuration options\r\n\r\n## Additional context\r\n\r\nThe implementation is based on the filesystem server's roots handling but adapted for the everything server's demonstration purposes. Key design decisions:\r\n\r\n1. **Non-intrusive**: Added roots support without modifying existing functionality\r\n2. **Educational**: Includes comprehensive logging to show roots protocol flow\r\n3. **Consistent**: Uses the same patterns and error handling as the filesystem server\r\n4. **Complete**: Handles both initialization and runtime roots updates\r\n\r\nThe `listRoots` tool provides a practical way for developers to verify that their MCP client's roots implementation is working correctly, even though this server doesn't perform file operations.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2573/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2568",
    "id": 3328505527,
    "node_id": "PR_kwDONRaG_86j_x-a",
    "number": 2568,
    "title": "Add host allowlisting and IP blocking to Fetch server",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      },
      {
        "id": 8359493310,
        "node_id": "LA_kwDONRaG_88AAAAB8kO-vg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-fetch",
        "name": "server-fetch",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Fetch MCP server - src/fetch"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-17T17:13:18Z",
    "updated_at": "2025-08-19T14:10:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2568",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2568",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2568.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2568.patch",
      "merged_at": null
    },
    "body": "Implements security feature to prevent access to local/internal IP addresses by default. Addresses issue #2317.\r\n\r\n## Changes\r\n- Block access to private IP ranges by default\r\n- Add host allowlisting with wildcard support\r\n- Add configuration options for security customization\r\n- Implement socket-level validation to prevent TOCTOU attacks\r\n- Update documentation with security examples\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2568/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2567",
    "id": 3328502819,
    "node_id": "PR_kwDONRaG_86j_xdC",
    "number": 2567,
    "title": "fix: Change memory server default filename from memory.json to memory.jsonl",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 8359496976,
        "node_id": "LA_kwDONRaG_88AAAAB8kPNEA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-memory",
        "name": "server-memory",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Memory MCP server - src/memory"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-17T17:09:30Z",
    "updated_at": "2025-08-24T03:01:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2567",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2567",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2567.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2567.patch",
      "merged_at": null
    },
    "body": "The Memory MCP server uses JSONL format (JSON Lines) where each line contains a separate JSON object, but was using a .json file extension. This caused IDE lint errors and confusion since the file is not valid JSON.\r\n\r\n**Changes:**\r\n- Update default filename in index.ts from memory.json to memory.jsonl\r\n- Update documentation references in README.md\r\n- Maintain backward compatibility for existing MEMORY_FILE_PATH configs\r\n\r\nFixes #2361\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2567/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2565",
    "id": 3328487460,
    "node_id": "PR_kwDONRaG_86j_ua_",
    "number": 2565,
    "title": "docs(fetch): Add Windows PYTHONIOENCODING configuration",
    "user": {
      "login": "olaservo",
      "id": 16480113,
      "node_id": "MDQ6VXNlcjE2NDgwMTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16480113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olaservo",
      "html_url": "https://github.com/olaservo",
      "followers_url": "https://api.github.com/users/olaservo/followers",
      "following_url": "https://api.github.com/users/olaservo/following{/other_user}",
      "gists_url": "https://api.github.com/users/olaservo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olaservo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olaservo/subscriptions",
      "organizations_url": "https://api.github.com/users/olaservo/orgs",
      "repos_url": "https://api.github.com/users/olaservo/repos",
      "events_url": "https://api.github.com/users/olaservo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olaservo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432733,
        "node_id": "LA_kwDONRaG_88AAAABzvmeHQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      },
      {
        "id": 8359493310,
        "node_id": "LA_kwDONRaG_88AAAAB8kO-vg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-fetch",
        "name": "server-fetch",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Fetch MCP server - src/fetch"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-17T16:50:13Z",
    "updated_at": "2025-08-17T22:22:48Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2565",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2565",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2565.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2565.patch",
      "merged_at": null
    },
    "body": "Add troubleshooting section for Windows users experiencing timeout issues.\r\n\r\nSetting PYTHONIOENCODING=utf-8 fixes character encoding problems that can cause the server to timeout on Windows systems.\r\n\r\nFixes #65\r\n\r\nGenerated with [Claude Code](https://claude.ai/code)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2565/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2552",
    "id": 3326025506,
    "node_id": "I_kwDONRaG_87GPx8i",
    "number": 2552,
    "title": "Support roots in the everything server",
    "user": {
      "login": "headinthebox",
      "id": 1073054,
      "node_id": "MDQ6VXNlcjEwNzMwNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1073054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/headinthebox",
      "html_url": "https://github.com/headinthebox",
      "followers_url": "https://api.github.com/users/headinthebox/followers",
      "following_url": "https://api.github.com/users/headinthebox/following{/other_user}",
      "gists_url": "https://api.github.com/users/headinthebox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/headinthebox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/headinthebox/subscriptions",
      "organizations_url": "https://api.github.com/users/headinthebox/orgs",
      "repos_url": "https://api.github.com/users/headinthebox/repos",
      "events_url": "https://api.github.com/users/headinthebox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/headinthebox/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      },
      {
        "id": 7767432743,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJw",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "7057ff",
        "default": true,
        "description": "Good for newcomers"
      },
      {
        "id": 8359492806,
        "node_id": "LA_kwDONRaG_88AAAAB8kO8xg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-everything",
        "name": "server-everything",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Everything MCP server - src/everything"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2025-08-15T18:42:23Z",
    "updated_at": "2025-08-23T07:06:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "Can we add roots to the everything server?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2552/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2546",
    "id": 3321262742,
    "node_id": "PR_kwDONRaG_86jomKH",
    "number": 2546,
    "title": "Add Academiadepolitie.com MCP server",
    "user": {
      "login": "razvan1326",
      "id": 194438366,
      "node_id": "U_kgDOC5bk3g",
      "avatar_url": "https://avatars.githubusercontent.com/u/194438366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/razvan1326",
      "html_url": "https://github.com/razvan1326",
      "followers_url": "https://api.github.com/users/razvan1326/followers",
      "following_url": "https://api.github.com/users/razvan1326/following{/other_user}",
      "gists_url": "https://api.github.com/users/razvan1326/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/razvan1326/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/razvan1326/subscriptions",
      "organizations_url": "https://api.github.com/users/razvan1326/orgs",
      "repos_url": "https://api.github.com/users/razvan1326/repos",
      "events_url": "https://api.github.com/users/razvan1326/events{/privacy}",
      "received_events_url": "https://api.github.com/users/razvan1326/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 8359528129,
        "node_id": "LA_kwDONRaG_88AAAAB8kRGwQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/add-community-server",
        "name": "add-community-server",
        "color": "FEF2C0",
        "default": false,
        "description": "This pull request adds a link to a community-created server."
      },
      {
        "id": 8461835294,
        "node_id": "LA_kwDONRaG_88AAAAB-F1cHg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/waiting%20for%20submitter",
        "name": "waiting for submitter",
        "color": "C5DEF5",
        "default": false,
        "description": "Waiting for the submitter to provide more info"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-14T08:17:10Z",
    "updated_at": "2025-08-17T16:07:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2546",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2546",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2546.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2546.patch",
      "merged_at": null
    },
    "body": "## Adding Academiadepolitie.com MCP Server\n\nThis PR adds the Academiadepolitie.com MCP server to the community servers section.\n\n### What it does\nThe server provides AI tutoring capabilities for Romanian Ministry of Internal Affairs educational institutions entrance exam preparation, serving over 50,000 active students.\n\n### Server Implementation\n- **Location**: `src/academiadepolitie-com/`\n- **Type**: Remote MCP server with OAuth 2.1 authentication\n- **Transport**: HTTP/SSE\n- **Live Server**: https://mcp.academiadepolitie.com:8443\n\n### Tools Provided\n1. `get_student_data` - Student analytics and learning insights\n2. `search_articles` - Content discovery across 5,000+ educational materials\n3. `get_article_content` - Paginated article retrieval\n4. `add_note` - Personal note-taking system\n5. `send_challenge` - Peer-to-peer learning challenges\n6. `update_reading_progress` - Granular progress tracking\n7. `save_generated_quiz` - AI quiz persistence\n\n### Changes Made\n- Added server implementation in `src/academiadepolitie-com/`\n- Updated main README.md to list server in community section\n- Added dependency to main package.json\n\n### Testing\nThe server is live and tested at https://mcp.academiadepolitie.com:8443\n\nCloses #2543 (previous PR with incorrect structure)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2546/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2526",
    "id": 3311384679,
    "node_id": "I_kwDONRaG_87FX7hn",
    "number": 2526,
    "title": "filesystem: Incorrect Path resolution causes \"Error: Access denied - path outside allowed directories\"",
    "user": {
      "login": "stefanpolenz-neurawork",
      "id": 224513057,
      "node_id": "U_kgDODWHMIQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/224513057?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefanpolenz-neurawork",
      "html_url": "https://github.com/stefanpolenz-neurawork",
      "followers_url": "https://api.github.com/users/stefanpolenz-neurawork/followers",
      "following_url": "https://api.github.com/users/stefanpolenz-neurawork/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefanpolenz-neurawork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefanpolenz-neurawork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefanpolenz-neurawork/subscriptions",
      "organizations_url": "https://api.github.com/users/stefanpolenz-neurawork/orgs",
      "repos_url": "https://api.github.com/users/stefanpolenz-neurawork/repos",
      "events_url": "https://api.github.com/users/stefanpolenz-neurawork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefanpolenz-neurawork/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-11T19:29:24Z",
    "updated_at": "2025-08-24T02:45:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "**Describe the bug**\nSince my last update of the Fileserver MCP I see basically every first call to the MCP fail with \"Error: Access denied - path outside allowed directories\". Which is really annoying because it means many tool calls instead of the first one succeeding.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. configure the fileserver MCP with one path that doesn't include the execution dir of the server (or c:\\windows\\system32 apparently)\n2. Have Claude try to open a relative path directly in his root path, e.g.\n{\n  `path`: `make-automation-audit-20250807/message.log`\n}\n3. see Error instead of success\nError: Access denied - path outside allowed directories: C:\\Windows\\system32\\make-automation-audit-20250807\\message.log not in C:\\Users\\Stefan Polenz\\Documents\\claude\n\n**Expected behavior**\nUntil recently giving the current project dir to Claude would allow it to open it right away. \n\n**Logs**\nfrom mcp-server-Filesystem.log\n2025-08-11T17:57:20.223Z [Filesystem] [info] Message from server: {\"result\":{\"content\":[{\"type\":\"text\",\"text\":\"Error: Access denied - path outside allowed directories: C:\\\\Windows\\\\system32\\\\make-automation-audit-20250807\\\\message.log not in C:\\\\Users\\\\Stefan Polenz\\\\Documents\\\\claude\"}],\"isError\":true},\"jsonrpc\":\"2.0\",\"id\":15} { metadata: undefined }\n\n**Additional context**\nWorking with Claude on the issue we are fairly confident that the issue is that in \nservers\\src\\filesystem\\index.ts\nin lines 77+, so https://github.com/modelcontextprotocol/servers/blob/aad86eecadb719e3e1b3419f0cbdfa72072c6fb6/src/filesystem/index.ts#L77\nsync function validatePath(requestedPath: string): Promise<string> {\n  const expandedPath = expandHome(requestedPath);\n  const absolute = path.isAbsolute(expandedPath)\n    ? path.resolve(expandedPath)\n    : path.resolve(process.cwd(), expandedPath);\ncauses issues as the current working dir at the time of calling the functions isn't in any of the permitted paths.\n\nA possible solution (that I can't test as I can't seem to see building information):\nsync function validatePath(requestedPath: string): Promise<string> {\n  const expandedPath = expandHome(requestedPath);\nconst absolute = path.isAbsolute(expandedPath)\n    ? path.resolve(expandedPath)\n    : (() => {\n        // Try to resolve relative path against all allowed directories\n        for (const allowedDir of allowedDirectories) {\n            const candidate = path.resolve(allowedDir, expandedPath);\n            // Check if the resulting path lies within an allowed directory\n            if (allowedDirectories.some(dir => candidate.startsWith(dir))) {\n                return candidate;\n            }\n        }\n        // Fallback: use first allowed directory as base\n        return path.resolve(allowedDirectories[0], expandedPath);\n    })();\n\nI could try to push this change - but seeing as I can't test currently I think this bug ticket might be a better option.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2526/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2519",
    "id": 3307424018,
    "node_id": "I_kwDONRaG_87FI0kS",
    "number": 2519,
    "title": "Window mcp instalation repo path needs double slashes",
    "user": {
      "login": "rodev018",
      "id": 219142821,
      "node_id": "U_kgDODQ_apQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/219142821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodev018",
      "html_url": "https://github.com/rodev018",
      "followers_url": "https://api.github.com/users/rodev018/followers",
      "following_url": "https://api.github.com/users/rodev018/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodev018/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodev018/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodev018/subscriptions",
      "organizations_url": "https://api.github.com/users/rodev018/orgs",
      "repos_url": "https://api.github.com/users/rodev018/repos",
      "events_url": "https://api.github.com/users/rodev018/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodev018/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8359493992,
        "node_id": "LA_kwDONRaG_88AAAAB8kPBaA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-git",
        "name": "server-git",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Git MCP server - src/git"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2025-08-10T10:15:13Z",
    "updated_at": "2025-08-24T03:11:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "Describe the bug\nWhen configuring mcpServers on Windows, paths containing backslashes are not handled correctly if not escaped in JSON. Using a path like c:\\temp\\bvb causes MCP error -32000: Connection closed because \\t is interpreted as a tab character.\n\nTo Reproduce\nSteps to reproduce the behavior:\n\nCreate an MCP configuration on Windows similar to:\n\njson\nCopy\nEdit\n{\n  \"mcpServers\": {\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-git\",\n        \"--repository\",\n        \"c:\\temp\\project\"\n      ]\n    }\n  }\n}\nStart KiloCode in VS Code.\n\nObserve that the MCP connection fails with error -32000: Connection closed.\n\nExpected behavior\nThe MCP server should connect successfully when given a valid Windows path, even if the path uses standard backslashes (as is default in Windows).\n\nLogs\n\nnginx\nCopy\nEdit\nMCP error -32000: Connection closed\nAdditional context\nEscaping the Windows path (e.g., \"C:\\\\temp\\\\project\") fixes the issue. This may need better documentation, automatic escaping, or clearer error messaging to prevent confusion for Windows users.\n\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2519/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2517",
    "id": 3306512364,
    "node_id": "I_kwDONRaG_87FFV_s",
    "number": 2517,
    "title": "Fetch MCP server fails with -32000 Connection Closed on LM Studio",
    "user": {
      "login": "matthieu-vergne",
      "id": 1774210,
      "node_id": "MDQ6VXNlcjE3NzQyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1774210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthieu-vergne",
      "html_url": "https://github.com/matthieu-vergne",
      "followers_url": "https://api.github.com/users/matthieu-vergne/followers",
      "following_url": "https://api.github.com/users/matthieu-vergne/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthieu-vergne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthieu-vergne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthieu-vergne/subscriptions",
      "organizations_url": "https://api.github.com/users/matthieu-vergne/orgs",
      "repos_url": "https://api.github.com/users/matthieu-vergne/repos",
      "events_url": "https://api.github.com/users/matthieu-vergne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthieu-vergne/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8359493310,
        "node_id": "LA_kwDONRaG_88AAAAB8kO-vg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-fetch",
        "name": "server-fetch",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Fetch MCP server - src/fetch"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2025-08-09T15:46:15Z",
    "updated_at": "2025-08-24T15:56:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "**Describe the bug**\nThe Fetch MCP server randomly fails to run (often second use, sometimes third use):\n\n<img width=\"291\" height=\"79\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ef4efdcd-8dd1-49d1-9f19-dac9436ab576\" />\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Install LM Studio\n2. add the Fetch MCP server to its `mcp.json` using the docker version:\n```json\n    \"fetch\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp/fetch\"\n      ]\n    }\n```\n3. reload the tool until it fails:\n\n<img width=\"1569\" height=\"560\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4077747e-8e50-4dfa-a7a6-c3014c6d425c\" />\n\nYou may also load a model and prompt it with a link, but the response generation stops immediately.\n\n**Expected behavior**\nIt should properly reload the tools when requested.\nPrompting should not fail.\n\n**Logs**\n```\n2025-08-09 17:37:14  [INFO]\n [Plugin(mcp/fetch)] stdout: [Tools Prvdr.] Register with LM Studio\n2025-08-09 17:37:15  [INFO]\n [Plugin(mcp/fetch)] stdout: [Tools Prvdr.] Register with LM Studio\n2025-08-09 17:37:19  [INFO]\n [Plugin(mcp/fetch)] stdout: [Tools Prvdr.] Register with LM Studio\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   + Exception Group Traceback (most recent call last):\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp/server/stdio.py\", line 83, in stdio_server\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     yield read_stream, write_stream\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp_server_fetch/server.py\", line 288, in serve\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     await server.run(read_stream, write_stream, options, raise_exceptions=True)\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp/server/lowlevel/server.py\", line 424, in run\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     async with ServerSession(\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp/shared/session.py\", line 122, in __aexit__\n  |     return await self._task_group.__aexit__(exc_type, exc_val, exc_tb)\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |   File \"/app/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 763, in __aexit__\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     raise BaseExceptionGroup(\n  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)\n  +-+---------------- 1 ----------------\n    | Traceback (most recent call last):\n    |   File \"/app/.venv/lib/python3.11/site-packages/mcp/shared/session.py\", line 235, in _receive_loop\n    |     notification = self._receive_notification_type.model_validate(\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   File \"/app/.venv/lib/python3.11/site-packages/pydantic/main.py\", line 627, in model_validate\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:     |     return cls.__pydantic_validator__.validate_python(\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:     | pydantic_core._pydantic_core.ValidationError: 5 validation errors for ClientNotification\nProgressNotification.method\n  Input should be 'notifications/progress' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\nProgressNotification.params.progressToken\n  Field required [type=missing, input_value={'requestId': 1, 'reason'... operation was aborted'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nProgressNotification.params.progress\n  Field required [type=missing, input_value={'requestId': 1, 'reason'... operation was aborted'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nInitializedNotification.method\n  Input should be 'notifications/initialized' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\nRootsListChangedNotification.method\n  Input should be 'notifications/roots/list_changed' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\n    +------------------------------------\n\nDuring handling of the above exception, another exception occurred:\n\n  + Exception Group Traceback (most recent call last):\n  |   File \"/app/.venv/bin/mcp-server-fetch\", line 10, in <module>\n  |     sys.exit(main())\n  |              ^^^^^^\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp_server_fetch/__init__.py\", line 21, in main\n  |     asyncio.run(serve(args.user_agent, args.ignore_robots_txt, args.proxy_url))\n  |   File \"/root/.local/share/uv/python/cpython-3.11.13-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py\", line 190, in run\n  |     return runner.run(main)\n  |            ^^^^^^^^^^^^^^^^\n  |   File \"/root/.local/share/uv/python/cpython-3.11.13-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py\", line 118, in run\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     return self._loop.run_until_complete(task)\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |   File \"/root/.local/share/uv/python/cpython-3.11.13-linux-x86_64-gnu/lib/python3.11/asyncio/base_events.py\", line 654, in run_until_complete\n  |     return future.result()\n  |            ^^^^^^^^^^^^^^^\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp_server_fetch/server.py\", line 287, in serve\n  |     async with stdio_server() as (read_stream, write_stream):\n  |   File \"/root/.local/share/uv/python/cpython-3.11.13-linux-x86_64-gnu/lib/python3.11/contextlib.py\", line 231, in __aexit__\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:   |     await self.gen.athrow(typ, value, traceback)\n  |   File \"/app/.venv/lib/python3.11/site-packages/mcp/server/stdio.py\", line 80, in stdio_server\n  |     async with anyio.create_task_group() as tg:\n  |   File \"/app/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 763, in __aexit__\n  |     raise BaseExceptionGroup(\n  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)\n  +-+---------------- 1 ----------------\n    | Exception Group Traceback (most recent call last):\n    |   File \"/app/.venv/lib/python3.11/site-packages/mcp/server/stdio.py\", line 83, in stdio_server\n    |     yield read_stream, write_stream\n    |   File \"/app/.venv/lib/python3.11/site-packages/mcp_server_fetch/server.py\", line 288, in serve\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:     |     await server.run(read_stream, write_stream, options, raise_exceptions=True)\n    |   File \"/app/.venv/lib/python3.11/site-packages/mcp/server/lowlevel/server.py\", line 424, in run\n    |     async with ServerSession(\n    |   File \"/app/.venv/lib/python3.11/site-packages/mcp/shared/session.py\", line 122, in __aexit__\n    |     return await self._task_group.__aexit__(exc_type, exc_val, exc_tb)\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   File \"/app/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 763, in __aexit__\n2025-08-09 17:37:22 [ERROR]\n [Plugin(mcp/fetch)] stderr:     |     raise BaseExceptionGroup(\n    | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)\n    +-+---------------- 1 ----------------\n      | Traceback (most recent call last):\n      |   File \"/app/.venv/lib/python3.11/site-packages/mcp/shared/session.py\", line 235, in _receive_loop\n      |     notification = self._receive_notification_type.model_validate(\n      |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n      |   File \"/app/.venv/lib/python3.11/site-packages/pydantic/main.py\", line 627, in model_validate\n      |     return cls.__pydantic_validator__.validate_python(\n      |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n      | pydantic_core._pydantic_core.ValidationError: 5 validation errors for ClientNotification\nProgressNotification.method\n  Input should be 'notifications/progress' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\nProgressNotification.params.progressToken\n  Field required [type=missing, input_value={'requestId': 1, 'reason'... operation was aborted'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nProgressNotification.params.progress\n  Field required [type=missing, input_value={'requestId': 1, 'reason'... operation was aborted'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nInitializedNotification.method\n  Input should be 'notifications/initialized' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\nRootsListChangedNotification.method\n  Input should be 'notifications/roots/list_changed' [type=literal_error, input_value='notifications/cancelled', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/literal_error\n      +------------------------------------\n```\n\n**Additional context**\nNo problem with MCP server file system, so seems to be specific to fetch.\nI use Fedora 42, but it should not be relevant since I use the docker version.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2517/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/pull/2516",
    "id": 3306434840,
    "node_id": "PR_kwDONRaG_86i4aDM",
    "number": 2516,
    "title": "feat(filesystem): add streaming `get_file_hash` tool for cryptographic digests (md5/sha1/sha256)",
    "user": {
      "login": "Pucciano",
      "id": 8167234,
      "node_id": "MDQ6VXNlcjgxNjcyMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8167234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pucciano",
      "html_url": "https://github.com/Pucciano",
      "followers_url": "https://api.github.com/users/Pucciano/followers",
      "following_url": "https://api.github.com/users/Pucciano/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pucciano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pucciano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pucciano/subscriptions",
      "organizations_url": "https://api.github.com/users/Pucciano/orgs",
      "repos_url": "https://api.github.com/users/Pucciano/repos",
      "events_url": "https://api.github.com/users/Pucciano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pucciano/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      },
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-08-09T14:32:51Z",
    "updated_at": "2025-08-13T12:58:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/pulls/2516",
      "html_url": "https://github.com/modelcontextprotocol/servers/pull/2516",
      "diff_url": "https://github.com/modelcontextprotocol/servers/pull/2516.diff",
      "patch_url": "https://github.com/modelcontextprotocol/servers/pull/2516.patch",
      "merged_at": null
    },
    "body": "<!-- Provide a brief description of your changes -->\r\nAdd a streaming file-hash tool to the filesystem server with Zod-validated\r\ninputs, allowed-roots enforcement, and optional digest encoding.\r\n\r\n## Description\r\n\r\nThis PR adds a new tool, `get_file_hash`, to the **filesystem** MCP server.\r\n\r\n- Computes cryptographic digests via Node `crypto.createHash` + streaming\r\n  `fs.createReadStream` (efficient on large files)\r\n- Supported algorithms (policy gate): `md5`, `sha1`, `sha256` (default: `sha256`)\r\n- Output encoding: `\"hex\"` (default) or `\"base64\"` (optional)\r\n- Rejects non-regular files (directories/devices); respects roots/realpath checks\r\n- Zod input schema + `ListTools` registration\r\n- README updated with a tool entry consistent with existing docs\r\n\r\n## Server Details\r\n- Server: **filesystem**\r\n- Changes to: **tools** (new tool), **unit tests** (new tests), **docs** (README tools section)\r\n\r\n## Motivation and Context\r\n\r\nI’m a computer forensics expert; verifying file integrity is critical to chain of\r\ncustody. Standards (e.g., ISO/IEC 27037, SWGDE) emphasize hashing digital evidence.\r\nNIST recommends collision-resistant hashes (SHA-2); SHA-1/MD5 remain for legacy\r\nidentification but not for collision-sensitive uses. This tool defaults to SHA-256\r\nwhile retaining MD5/SHA-1 for interoperability. Keeping the algorithm set small\r\nimproves DFIR compatibility and simplifies model prompts.\r\n\r\nProviding `get_file_hash` inside the filesystem server lets LLM-driven workflows\r\ncompute/compare hashes under the same allowed-roots and realpath/symlink controls\r\nas other file operations—no external copying, consistent and auditable results.\r\n\r\n## How Has This Been Tested?\r\n\r\n- **Environment:** macOS 15.5, LM Studio 0.3.22\r\n- **MCP client:** LM Studio (server built via Docker and used as a Docker-mapped\r\n  MCP server; tool discovered via `ListTools`)\r\n- **Models:**\r\n  - qwen/qwen3-coder-30b (benefits from explicit “when to use” + args in prompt)\r\n  - openai/gpt-oss-120b (works with concise descriptions)\r\n  - mistralai/devstral-small-2507 (tool calls succeed)\r\n- **Unit tests:** text vectors (`\"abc\"`, `\"ForensicShark\"`), small binary snippet,\r\n  encodings (hex/base64), non-regular paths rejected (dir/symlink/device), and\r\n  unsupported algorithms (e.g., `sha512`, `crc32`, `whirlpool`) rejected by policy\r\n- **Manual:** end-to-end via stdio within LM Studio; expected digests returned;\r\n  clear error on unavailable algorithms (FIPS/build)\r\n- **Platform note:** Not tested on Windows\r\n\r\n## Breaking Changes\r\nNone. Additive only.\r\n\r\n## Types of changes\r\n- [x] New feature (non-breaking)\r\n- [x] Documentation update\r\n- [ ] Bug fix\r\n- [ ] Breaking change\r\n\r\n## Checklist\r\n- [x] Follows MCP security best practices (roots-restricted, realpath/symlink checks)\r\n- [x] README updated (tool entry)\r\n- [x] Code follows repo style guidelines\r\n- [x] Appropriate error handling (unsupported algorithms / non-regular files)\r\n- [x] Inputs documented (path, algorithm, encoding)\r\n- [x] Tested with an LLM client (LM Studio)\r\n- [x] New and existing tests pass locally\r\n- [ ] CI not included in this PR (out of scope)\r\n\r\n## Additional context\r\n- Paths should be **relative to the allowed base directory** (as returned by\r\n  `list_directory`) when calling the tool from clients.\r\n- Tool description made concise and Qwen-friendly; instructs models to return\r\n  only the digest string.\r\n- Only `md5`, `sha1`, `sha256` are supported by design; no extended algorithms\r\n  or env toggles in this PR.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2516/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2505",
    "id": 3301310919,
    "node_id": "I_kwDONRaG_87ExgHH",
    "number": 2505,
    "title": "mcp/filesystem terminates unexpectedly",
    "user": {
      "login": "chrissound",
      "id": 1499652,
      "node_id": "MDQ6VXNlcjE0OTk2NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1499652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrissound",
      "html_url": "https://github.com/chrissound",
      "followers_url": "https://api.github.com/users/chrissound/followers",
      "following_url": "https://api.github.com/users/chrissound/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrissound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrissound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrissound/subscriptions",
      "organizations_url": "https://api.github.com/users/chrissound/orgs",
      "repos_url": "https://api.github.com/users/chrissound/repos",
      "events_url": "https://api.github.com/users/chrissound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrissound/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2025-08-07T17:21:22Z",
    "updated_at": "2025-08-24T10:08:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "The process terminates unexpectedly? I'm trying to run this standalone, I'll use the API directly.\n\n```\nroot@mcp-test:~/servers# docker run --rm -v $PWD:/projects mcp/filesystem /projects\nSecure MCP Filesystem Server running on stdio\nroot@mcp-test:~/servers# echo $?\n0\n```\n\n**To Reproduce**\n```\ngit clone git@github.com:modelcontextprotocol/servers.git\ncd servers\ndocker build -t mcp/filesystem -f src/filesystem/Dockerfile .\nroot@mcp-test:~/servers# docker run --rm -v $PWD:/projects mcp/filesystem /projects\nSecure MCP Filesystem Server running on stdio\n```\n\nI expect it to instead be continually running.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2505/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2483",
    "id": 3291856336,
    "node_id": "I_kwDONRaG_87ENb3Q",
    "number": 2483,
    "title": "Enhancement Request: Graceful handling of temporarily unavailable network paths",
    "user": {
      "login": "F1rlefanz",
      "id": 158139941,
      "node_id": "U_kgDOCW0GJQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/158139941?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/F1rlefanz",
      "html_url": "https://github.com/F1rlefanz",
      "followers_url": "https://api.github.com/users/F1rlefanz/followers",
      "following_url": "https://api.github.com/users/F1rlefanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/F1rlefanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/F1rlefanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/F1rlefanz/subscriptions",
      "organizations_url": "https://api.github.com/users/F1rlefanz/orgs",
      "repos_url": "https://api.github.com/users/F1rlefanz/repos",
      "events_url": "https://api.github.com/users/F1rlefanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/F1rlefanz/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432740,
        "node_id": "LA_kwDONRaG_88AAAABzvmeJA",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      },
      {
        "id": 8351171797,
        "node_id": "LA_kwDONRaG_88AAAAB8cTE1Q",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-filesystem",
        "name": "server-filesystem",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Filesystem MCP server - src/filesystem"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2025-08-05T07:03:33Z",
    "updated_at": "2025-08-22T18:45:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Enhancement Request: Graceful handling of temporarily unavailable network paths\n\n## Summary\nThe Filesystem MCP Server currently crashes on startup if any configured path is temporarily unavailable (e.g., network drives, NAS systems). This prevents using the server in environments where some paths may be intermittently available.\n\n## Current Behavior\n- Server performs `fs.stat()` on all configured paths during startup\n- If ANY path is unreachable, server terminates with `process.exit(1)`\n- This makes the entire filesystem server unusable when network paths are offline\n\n## Expected Behavior\nThe server should:\n1. **Start successfully** even if some network paths are temporarily unavailable\n2. **Log warnings** for unreachable paths instead of crashing\n3. **Gracefully handle operations** on unavailable paths at runtime with appropriate error messages\n4. **Optionally retry** path validation periodically or on-demand\n\n## Use Case\nMany users have configurations mixing local paths with network storage (NAS, SMB shares, etc.) that may not be available 24/7:\n- Home NAS systems that power down overnight\n- VPN-connected network drives\n- Intermittent cloud storage mounts\n\n## Reproduction\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"C:\\\\Users\\\\username\\\\Documents\",\n        \"\\\\\\\\nas.local\\\\shared\\\\documents\"  // <- NAS is offline\n      ]\n    }\n  }\n}\n```\n\n**Current result:** Server fails to start completely\n**Expected result:** Server starts, local paths work, NAS operations fail gracefully\n\n## Proposed Solutions\n\n### Option 1: Command-line flag (recommended)\n```bash\nnpx @modelcontextprotocol/server-filesystem --ignore-missing-paths C:\\local \\\\nas\\share\n```\n\n### Option 2: Path-specific configuration\n```json\n{\n  \"required\": [\"C:\\\\Users\\\\username\\\\Documents\"],\n  \"optional\": [\"\\\\\\\\nas.local\\\\shared\\\\documents\"]\n}\n```\n\n### Option 3: Runtime validation only\nSkip startup validation entirely, handle path availability at operation time.\n\n## Impact\nThis enhancement would:\n- ✅ Improve reliability in mixed local/network environments\n- ✅ Reduce configuration management complexity\n- ✅ Allow for more flexible deployment scenarios\n- ✅ Maintain backward compatibility\n\n## Environment\n- OS: Windows 11\n- Package: @modelcontextprotocol/server-filesystem (latest)\n- Client: Claude Desktop\n\n## Related Issues\nSimilar issues suggest this is a common pain point:\n- #1838 (path validation issues on Windows)\n- #267 (server connection failures)\n- #75 (Windows filesystem configuration issues)\n\n## Additional Context\nThe current \"fail-fast\" approach makes sense for critical paths but is too rigid for optional network resources. A more resilient approach would significantly improve the user experience for mixed-environment setups.\n\n## Logs\nFrom `C:\\Users\\Christoph\\AppData\\Roaming\\Claude\\logs\\mcp-server-filesystem.log`:\n```\nError accessing directory \\\\ds418play\\Daten\\Gesundheits- und Krankenpfleger\\Arbeitsanweisungen: Error: UNKNOWN: unknown error, stat '\\\\ds418play\\Daten\\Gesundheits- und Krankenpfleger\\Arbeitsanweisungen'\n    at async Object.stat (node:internal/fs/promises:1037:18)\n    at async file:///C:/Users/Christoph/AppData/Local/npm-cache/_npx/a3241bba59c344f5/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js:53:23\n    at async Promise.all (index 5)\n    at async file:///C:/Users/Christoph/AppData/Local/npm-cache/_npx/a3241bba59c344f5/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js:51:1 {\n  errno: -4094,\n  code: 'UNKNOWN',\n  syscall: 'stat',\n  path: '\\\\\\\\ds418play\\\\Daten\\\\Gesundheits- und Krankenpfleger\\\\Arbeitsanweisungen'\n}\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2483/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2473",
    "id": 3286205326,
    "node_id": "I_kwDONRaG_87D34OO",
    "number": 2473,
    "title": "sequentialthinking: Invalid totalThoughts: must be a number",
    "user": {
      "login": "fjaccarino",
      "id": 431534,
      "node_id": "MDQ6VXNlcjQzMTUzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/431534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjaccarino",
      "html_url": "https://github.com/fjaccarino",
      "followers_url": "https://api.github.com/users/fjaccarino/followers",
      "following_url": "https://api.github.com/users/fjaccarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjaccarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjaccarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjaccarino/subscriptions",
      "organizations_url": "https://api.github.com/users/fjaccarino/orgs",
      "repos_url": "https://api.github.com/users/fjaccarino/repos",
      "events_url": "https://api.github.com/users/fjaccarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjaccarino/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8359497168,
        "node_id": "LA_kwDONRaG_88AAAAB8kPN0A",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-sequentialthinking",
        "name": "server-sequentialthinking",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Sequential Thinking MCP server - src/sequentialthinking"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-02T18:54:37Z",
    "updated_at": "2025-08-24T02:46:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "**Describe the bug**\nUsing `sequentialthinking` with Librechat v0.7.9 (AI client).  During execution, some responses contain the error but not all: \"Invalid totalThoughts: must be a number\"\n\n<img width=\"1125\" height=\"1024\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/71288ece-8206-42b7-b451-3db7628a3fee\" />\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Deploy Librechat, configure sequentialthinking MCP server.\n2. Choose sequential-thinking in the MCP server dropdown\n3. Craft query, send message.\n\n<img width=\"716\" height=\"167\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bb6362a9-7742-4ba0-b48c-a965f0aaec2a\" />\n\n<img width=\"423\" height=\"183\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0244e452-6154-4688-9201-6e09adba520a\" />\n\n**Expected behavior**\nExpect to see clear order of events with no errors. \n\n**Logs**\nIf applicable, add logs to help explain your problem.\n\n**Additional context**\nAdd any other context about the problem here.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2473/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472",
    "repository_url": "https://api.github.com/repos/modelcontextprotocol/servers",
    "labels_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472/labels{/name}",
    "comments_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472/comments",
    "events_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472/events",
    "html_url": "https://github.com/modelcontextprotocol/servers/issues/2472",
    "id": 3286040953,
    "node_id": "I_kwDONRaG_87D3QF5",
    "number": 2472,
    "title": "Title of page not included on fetch (Pandas v2.1.0 release page)",
    "user": {
      "login": "gebalassa",
      "id": 11603889,
      "node_id": "MDQ6VXNlcjExNjAzODg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11603889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gebalassa",
      "html_url": "https://github.com/gebalassa",
      "followers_url": "https://api.github.com/users/gebalassa/followers",
      "following_url": "https://api.github.com/users/gebalassa/following{/other_user}",
      "gists_url": "https://api.github.com/users/gebalassa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gebalassa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gebalassa/subscriptions",
      "organizations_url": "https://api.github.com/users/gebalassa/orgs",
      "repos_url": "https://api.github.com/users/gebalassa/repos",
      "events_url": "https://api.github.com/users/gebalassa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gebalassa/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 7767432729,
        "node_id": "LA_kwDONRaG_88AAAABzvmeGQ",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 8359493310,
        "node_id": "LA_kwDONRaG_88AAAAB8kO-vg",
        "url": "https://api.github.com/repos/modelcontextprotocol/servers/labels/server-fetch",
        "name": "server-fetch",
        "color": "D4C5F9",
        "default": false,
        "description": "Reference implementation for the Fetch MCP server - src/fetch"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2025-08-02T15:50:34Z",
    "updated_at": "2025-08-24T03:36:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "**Describe the bug**\nFetching the URL `https://pandas.pydata.org/docs/dev/whatsnew/v2.1.0.html` does not include the the title line \"What’s new in 2.1.0 (Aug 30, 2023)\".\n\n**To Reproduce**\nRun the `fetch` tool with the `https://pandas.pydata.org/docs/dev/whatsnew/v2.1.0.html` URL.\n\n**Expected behavior**\n\"What’s new in 2.1.0 (Aug 30, 2023)\" title line should be included, but it isn't.\n\n**Logs**\nN/A\n\n**Additional context**\nThis was done as part of an Outlier project which implemented the tool. I have no access to their implementation of the MCP server but I don't think its a server configuration error.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/modelcontextprotocol/servers/issues/2472/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]